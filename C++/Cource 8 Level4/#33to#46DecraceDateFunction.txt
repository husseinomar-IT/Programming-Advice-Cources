#pragma warning(disable:4996)
#include<iostream>
#include<ctime>
#include<iomanip>
#include<string>
#include<cmath>
#include<vector>
#include<cctype>
#include<fstream>

using namespace std;


short ReadYear()
{
	short Year;
	cout << "\nPlease enter a Year? ";
	cin >> Year;
	return Year;

}

short ReadMonth()
{
	short Month;
	cout << "\nPlease enter a Month? ";
	cin >> Month;
	return Month;

}

short ReadDay()
{
	short Day;
	cout << "\nPlease enter a Day? ";
	cin >> Day;
	return Day;

}

short IsLeapYear(short Year)

{
	return(Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}




struct sDate

{

	short Day;
	short Month;
	short Year;
};


short NumberOfDaysInMonth(short Year, short Month)
{

	if (Month<1 || Month>12)
		return 0;
	int NumberOfDays[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	return	(Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : NumberOfDays[Month - 1];


}


void PrintDate(short Year, short Month, short Day,short d)

{
	string Days[7] = { "Sundy", "Monday", "Tuesday", "Wedenesday", "Thursdsy", "Friady", "Sat" };
	cout <<"Date      : "<< Day << "/" << Month << "/" << Year << "\n";
	cout << "Day Order:" << d << "\n";
	
	cout << "Day Name :" << Days[d] << "\n";


}




short OrderOfDay(short Year, short Month, short Day)
{
	short a, y, m;
	a = (14 - Month) / (12);
	y = Year - a;
	m = Month + 12 * a - 2;
	return  (Day + Year + (Year) / (4) - (Year) / (100) + (Year) / (400) + (31 * m) / (12)) % 7;
	
	
}


string MonthShortName(short Month)
{
	string arrMonth[12] = { "Jan", "Feb", "Mar",
		                   "April", "May", "Jun",
						   "July", "Aug", "Sep",
						   "Oct", "Nov", "Dec" };
	return arrMonth[Month - 1];
}




void PrintCelender(short Year, short Month)
{
	short Current = OrderOfDay(Year, Month, 1);
	short NumberOfDays = NumberOfDaysInMonth(Year, Month);

	
	printf("\n----------------------------%s--------------------------\n\n", MonthShortName(Month).c_str());
	printf(" Sun  Mon  Tue  Wed  Thu  Fri  Sat \n");
	short i;
	for (i = 0; i < Current; i++)
		printf("     ");
		
	for (short j = 1; j <= NumberOfDays; j++)
	{
		printf("%5d", j);
		if (++i == 7)
		{
			i = 0;
			printf("\n");
		}
	}
		
	printf("\n--------------------------------------------------------\n");
}


void PrintCelenderofYear(short Year)
{
	printf("\n--------------------------------------------------------\n\n\n");
	printf("                   Calender-%d\n ",Year);
	printf("\n\n\n--------------------------------------------------------\n");
	for (short i = 1; i <= 12; i++)
	{
		
		PrintCelender(Year, i);
	}


}


short NumberofDaysFromTheBeginingOfTheYear( short Day,short Month, short Year)
{

	short TotalDays = 0;
	for (short i = 1; i <= Month-1; i++)

        {
			TotalDays += NumberOfDaysInMonth(Year, i);
	    }
	TotalDays += Day;
	return TotalDays;

}



sDate ReadFullDate()
{
	sDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();
	return Date;
}
sDate AddDaysToDate(short AddDays,sDate Date)
{

	
	
	short RemainingDays = AddDays + NumberofDaysFromTheBeginingOfTheYear(Date.Day,Date.Month,Date.Year);
	short MonthDays = 0;

	
	Date.Month = 1;
	while (true)
	{
		MonthDays = NumberOfDaysInMonth(Date.Year, Date.Month);
		if (RemainingDays > MonthDays)
		{
			RemainingDays -= MonthDays;
			Date.Month++;
			if (Date.Month > 12)
			{
				Date.Month = 1;
				Date.Year++;
			}
			
		}
		else
		{
			Date.Day = RemainingDays;
			break;
		}
	}
	return Date;
}


bool IsDate1LessThanDate2(sDate Date1, sDate Date2)
{

	return(Date1.Year < Date2.Year) ? true
		: ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true
		: (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);

}


bool IsEqualDate1Date2(sDate Date1, sDate Date2)
{
	
	
	return(Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false;

}



bool ISLastDayInMonth(sDate Date)
{
	
	return(Date.Day == NumberOfDaysInMonth(Date.Year,Date.Month));


}
bool isLastMonthInYear(short Month)
{
	
	return(Month==12);
}




bool ISFirstDayInMonth(sDate Date)
{

	return(Date.Day == 1);


}
bool isFirstMonthInYear(short Month)
{

	return(Month == 1);
}


sDate IncreaseByOneDay(sDate Date)
{

	if (ISLastDayInMonth(Date))
	{
		if (isLastMonthInYear(Date.Month))
		{
			Date.Day = 1;
			Date.Month = 1;
			Date.Year++;
		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}
		
	
	
	

	return Date;
}





sDate  IncreaseXDays(short Days,sDate Date)
{
	for (short i = 1; i <= Days; i++)
	{
		Date = IncreaseByOneDay(Date);
	}
	
	return Date;

}
void SwapDate(sDate &Date1, sDate &Date2)
{
	sDate Temp;
	Temp.Day   = Date1.Day;
	Temp.Month = Date1.Month;
	Temp.Year  = Date1.Year;
	


	Date1.Day   = Date2.Day;
	Date1.Month = Date2.Month;
	Date1.Year  = Date2.Year;


	Date2.Day   = Temp.Day;
	Date2.Month = Temp.Month;
	Date2.Year  = Temp.Year;
	
}

int DiffrentBetweenDate1Date2(sDate Date1, sDate Date2,bool includeEndDay=false)
{
	short TempFlag = 1;
	if (!IsDate1LessThanDate2(Date1, Date2))
	{
		SwapDate(Date1, Date2);
		TempFlag = -1;
	}

	short Days = 0;
 
	while (IsDate1LessThanDate2(Date1, Date2))
	{
		Days++;
		Date1 = IncreaseByOneDay(Date1);
		
	}
	return includeEndDay ? (++Days*TempFlag) : (Days*TempFlag);
	
}


sDate DeccreaseDateOneDay(sDate Date)
{

	if (ISFirstDayInMonth(Date))
	{
		if (isFirstMonthInYear(Date.Month))
		{
			Date.Day = 31;
			Date.Month = 12;
			Date.Year--;
		}
		else
		{
			Date.Month--;
			Date.Day = NumberOfDaysInMonth(Date.Year, Date.Month );
			

		}
	}
	else
	{
		Date.Day--;
	}





	return Date;
}


sDate  DeccreaseDateXDays(short Days, sDate Date)
{
	for (short i = 1; i <= Days; i++)
	{
		Date = DeccreaseDateOneDay(Date);
	}
	return Date;
}


sDate  DeccreaseDateOneWeek(sDate Date)
{
	for (short i = 1; i <= 7; i++)
	{
		Date = DeccreaseDateOneDay(Date);
	}
	return Date;
}

sDate DeccreaseDateByXWeeks(short Weeks, sDate Date)
{
	for (short i = 1; i <= Weeks; i++)
	{
		Date = DeccreaseDateOneWeek(Date);
	}
	return Date;
}

sDate DeccreaseDateByOneMonth( sDate Date)
{
	if (Date.Month == 1)
	{
		Date.Month = 12;
		Date.Year--;
	}
	else
	{
		Date.Month--;
	}
		

		short NumberOfDaysInCurrentMonth = NumberOfDaysInMonth(Date.Year, Date.Month);
		if (Date.Day > NumberOfDaysInCurrentMonth)
		{
			Date.Day = NumberOfDaysInCurrentMonth;
		}
	return Date;
}


sDate DeccreaseDateByXMonths(short Months, sDate Date)
{
	for (short i = 1; i <= Months; i++)
	{
		Date = DeccreaseDateByOneMonth(Date);
	}
	return Date;
}



sDate DeccreaseDateByOneYear( sDate Date)
{
	Date.Year--;
	return Date;
}


sDate DeccreaseDateXYear(short Years, sDate Date)
{
	for (short i = 1; i <= Years; i++)
	{
		Date = DeccreaseDateByOneYear(Date);
	}
	
	return Date;
}



sDate DeccreaseDateXYearFaster(short Years, sDate Date)
{
	Date.Year -= Years;

	return Date;
}


sDate DeccreaseDateByOneDecade(sDate Date)
{
	Date.Year -= 10;

	return Date;
}

sDate DeccreaseDateByXDecade(short Decade,sDate Date)
{
	for (short i = 1; i <= Decade; i++)
	{
		Date = DeccreaseDateByOneDecade(Date);
	}
	

	return Date;
}

sDate DeccreaseDateByXDecadeFaster(short Years, sDate Date)
{
	Date.Year -= 10*Years;

	return Date;
}

sDate DeccreaseDateByOneCentury( sDate Date)
{
	Date.Year -= 100;

	return Date;
}

sDate DeccreaseDateByOneMillennium(sDate Date)
{
	Date.Year -= 1000;

	return Date;
}





int main(){
	srand((unsigned)time(NULL));


	sDate Date = ReadFullDate();
	Date = DeccreaseDateOneDay(Date);
	cout <<"\n01-Subtracting one day is  :"<< Date.Day << "/" << Date.Month << "/" << Date.Year << endl;


	Date = DeccreaseDateXDays(10, Date);
	cout << "\n02-Subtracting  " << 10 << " days is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DeccreaseDateOneWeek(Date);
	cout << "\n03-Subtracting one week is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DeccreaseDateByXWeeks(10,Date);
	cout << "\n04-Subtracting  " << 10 << " Weeks is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;


	Date = DeccreaseDateByOneMonth(Date);
	cout << "\n05-Subtracting one Month is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;


	Date = DeccreaseDateByXMonths(5, Date);
	cout << "\n06-Subtracting  " << 5 << " Months is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;


	Date = DeccreaseDateByOneYear(Date);
	cout << "\n07-Subtracting one Year is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DeccreaseDateXYear(10, Date);

	cout << "\n08-Subtracting  " << 10 << " years is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DeccreaseDateXYearFaster(10, Date);
	cout << "\n09-Subtracting  " << 10 << " years(faster) is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DeccreaseDateByOneDecade(Date);
	cout << "\n10-Subtracting one Decade is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DeccreaseDateByXDecade(10, Date);

	cout << "\n11-Subtracting  " << 10 << " Decade is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;
	Date = DeccreaseDateByXDecadeFaster(10, Date);

	cout << "\n12-Subtracting  " << 10 << " decade(faster) is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;


	Date = DeccreaseDateByOneCentury(Date);
	cout << "\n13-Subtracting one Century is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;


	Date = DeccreaseDateByOneMillennium(Date);
	cout << "\n14-Subtracting one Millennium is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;
}