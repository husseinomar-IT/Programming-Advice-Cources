#include<iostream>
#include<string>
#include<cstdlib>
#include<cmath>
#include<ctime>

using namespace std;

enum enGameLevel{ easy = 1, med = 2, hard = 3, RandomLevel = 4 };
enum enGameOpreator{ add = 1, sub = 2, mul = 3, division = 4, miix = 5 };

struct stquestions
{

	int Num1 = 0;
	int Num2 = 0;
	enGameLevel Levelquestion;
	enGameOpreator Opquestion;
	int correctAnswer=0;
	int PlayerAnswer = 0;
	bool AnswerResult=false;
};
struct  stQuiz
{
	stquestions QuizquestionList[100];
	short NumbeofRound = 0;
	enGameLevel Level;
	enGameOpreator Opration;
	short RightAnswer=0;
	short FalseAnser = 0;
	bool isPass = false;

};
enGameLevel ReadQuizLevel()
{
	short Level = 1;
	do{
		cout << "Enter Question Level [1]: Easy, [2]: Med, [3]: Hard, [4]: Mix? ";
		cin >> Level;
	} while (Level <1 || Level>4);
	return (enGameLevel)Level;
	 
}



enGameOpreator ReadQuizOP()
{
	short Op = 1;
	do{
		cout << "Enter Operation Type [1]: Add, [2]: Sub, [3]: Mul, [4]: Div,[5]: Mix? ";
		cin >> Op;
	} while (Op <1 || Op>5);
	return (enGameOpreator)Op;

}



int RandomNumberBetweenRange(int from, int to)
{
	int Random = rand() % (to - from + 1) + from;
	return Random;
}



enGameOpreator RandomOp()
{
	int op = RandomNumberBetweenRange(1, 4);
	return(enGameOpreator)op;
}

short NumberOfQuestion()
{
	short qustion;
	do{
		cout << "How many Question from 1 to 10 :";
		cin >> qustion;
	} while (qustion<1 || qustion>10);
	return qustion;
}









string Tabs(short ReadNumTabs)
{
	string txt = "";
	for (short i = 1; i <= ReadNumTabs; i++)
	{
		txt = txt + "\t";
		cout << txt;
	}
	return txt;
}


string NewLine(short ReadNumTabs)
{
	string txt = "";
	for (short i = 1; i <= ReadNumTabs; i++)
	{
		txt = txt + "\n";
		cout << txt;
	}
	return txt;
}

string StringOpreator(enGameOpreator op)
{
	string arrOp[4] = { "+", "-", "*", "/" };
	return arrOp[op - 1];
}




void RsetetScreen()
{
	system("cls");
	system("color 0F");
}




int SimpleCalclute(int Num1, int Num2, enGameOpreator op)
{
	switch (op)
	{
	case enGameOpreator::add:
		return Num1 + Num2;
	case enGameOpreator::sub:
		return Num1 - Num2;
	case enGameOpreator::mul:
		return Num1 * Num2;
	case enGameOpreator::division:
		return Num1 / Num2;
	default:
		return Num1 + Num2;
	
	}
}

stquestions  Genaratequstion(enGameLevel Level, enGameOpreator op)
{
	stquestions question;
	if (Level == enGameLevel::RandomLevel)
	{
		Level = (enGameLevel)RandomNumberBetweenRange(1, 3);
	}

	if (op==enGameOpreator::miix)
	{
		op = RandomOp();
	}
	question.Opquestion = op;
	switch (Level)
	{
	case enGameLevel::easy:
		question.Num1 = RandomNumberBetweenRange(1, 10);
		question.Num2 = RandomNumberBetweenRange(1, 10);
		question.Levelquestion = Level;
		question.correctAnswer = SimpleCalclute(question.Num1, question.Num2, op);
		return question;
	case enGameLevel::med:
		question.Num1 = RandomNumberBetweenRange(10, 50);
		question.Num2 = RandomNumberBetweenRange(10, 50);
		question.Levelquestion = Level;
		question.correctAnswer = SimpleCalclute(question.Num1, question.Num2, op);
		return question;
	case enGameLevel::hard:
		question.Num1 = RandomNumberBetweenRange(50, 100);
		question.Num2 = RandomNumberBetweenRange(50, 100);
		question.Levelquestion = Level;
		question.correctAnswer = SimpleCalclute(question.Num1, question.Num2, op);
		return question;

	}
	return question;
	

	

}

void GenrateQuizquestion(stQuiz &Quiz)
{
	for (short Question = 0; Question < Quiz.NumbeofRound; Question++)
	{
		Quiz.QuizquestionList[Question] = Genaratequstion(Quiz.Level, Quiz.Opration);
	}

}


void printquestion(stQuiz &Quiz, short NumberQuestion)
{
	cout << "\n";
	cout << "Question[" << NumberQuestion + 1 << "/" << Quiz.NumbeofRound << "]\n\n";
	cout << Quiz.QuizquestionList[NumberQuestion].Num1 << endl;
	cout << Quiz.QuizquestionList[NumberQuestion].Num2 << endl;
	cout << StringOpreator(Quiz.QuizquestionList[NumberQuestion].Opquestion) << endl;
	cout << "\n-------------------\n";




}
int ReadPlyaerAnswer()
{
	int answer = 0;
	cin >> answer;
	return answer;
}

void ScreenColor(bool Result)
{
	if (Result)
		system("color 2F");
	else
		system("color 4F");
	
}

void CorrectQuestionanswer(stQuiz &Quiz, short question)
{
	if (Quiz.QuizquestionList[question].PlayerAnswer != Quiz.QuizquestionList[question].correctAnswer)
	{
		Quiz.QuizquestionList[question].AnswerResult = false;
		Quiz.FalseAnser++;
		cout << "Wrong Answer :-( \n";
		cout << "The Correct Answer: \n";
		cout << Quiz.QuizquestionList[question].correctAnswer << endl;

	}
	else
	{
		Quiz.QuizquestionList[question].AnswerResult = true;
		Quiz.RightAnswer++;
		cout << "Right Answer :-) \n";


	}
	ScreenColor(Quiz.QuizquestionList[question].AnswerResult);
}
void AskandAnswer(stQuiz &Quiz)
{
	for ( short question = 0; question < Quiz.NumbeofRound; question++)
	{
		printquestion(Quiz, question);
		Quiz.QuizquestionList[question].PlayerAnswer = ReadPlyaerAnswer();
		CorrectQuestionanswer(Quiz, question);
	}
	Quiz.isPass = (Quiz.RightAnswer >= Quiz.FalseAnser);

}


string GetFinalResult(bool Pass)
{
	if (Pass)
		return"PASS";
	else return"FAIL";
}
void PrintQuizResult(stQuiz Quiz)
{
	cout << "\n";
	cout << "--------------------------------\n\n";
	cout << "FinalResult is: " << GetFinalResult(Quiz.isPass);
	cout << "\n--------------------------------\n\n";
	cout << "NumberofQuestion is: " << Quiz.NumbeofRound << endl;
	cout << "Level is           : " << Quiz.Level << endl;
	cout << "Oprater is         : " << Quiz.Opration << endl;
	cout << "RightAnswer is     : " << Quiz.RightAnswer << endl;
	cout << "FalseAnswer is     : " << Quiz.FalseAnser << endl;
	cout << "\n--------------------------------\n\n";
}
void playMathGame()
{
	stQuiz quiz;
	quiz.NumbeofRound = NumberOfQuestion();
	quiz.Level = ReadQuizLevel();
	quiz.Opration = ReadQuizOP();
	GenrateQuizquestion(quiz);
	AskandAnswer(quiz);
	PrintQuizResult(quiz);




}

void stratGame()
{
	char acccept = 'Y';
	do{
		RsetetScreen();
		playMathGame();
		cout << "Do you want to play again\n";
		cin >> acccept;

	} 
	while (acccept == 'Y' || acccept == 'y');

}





int main()
{
	srand((unsigned)time(NULL));
	

	playMathGame();
	return 0;



}

